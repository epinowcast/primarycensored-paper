version: '3'

tasks:
  default:
    desc: Run the complete analysis pipeline
    cmds:
      - task: run
      - task: manuscript

  render:
    desc: "Render the targets Rmarkdown document (optional: PARAMS='simulation_n=1000')"
    deps: [install]
    sources:
      - _targets.Rmd
      - R/**/*.R
    generates:
      - _targets.md
    cmds:
      - echo "Rendering _targets.Rmd..."
      - |
        if [ -n "{{.PARAMS}}" ]; then
          echo "Using custom parameters: {{.PARAMS}}"
          Rscript -e "
          params_str <- '{{.PARAMS}}'
          if (params_str == 'test_mode=true') {
            custom_params <- list(test_mode = TRUE)
          } else {
            # Parse other parameter formats if needed
            custom_params <- list()
          }
          rmarkdown::render('_targets.Rmd', params = custom_params)
          "
        else
          echo "Using default parameters"
          Rscript -e "rmarkdown::render('_targets.Rmd')"
        fi

  run:
    desc: Run the targets pipeline
    deps: [render]
    sources:
      - _targets.R
      - R/**/*.R
      - _targets_r/**/*.R
    cmds:
      - echo "Running targets pipeline..."
      - Rscript -e "targets::tar_make()"

  visualize:
    desc: Create a visualization of the pipeline
    deps: [render]
    cmds:
      - Rscript scripts/visualize_pipeline.R

  progress:
    desc: Show pipeline progress
    deps: [install]
    cmds:
      - echo "Checking pipeline progress..."
      - Rscript -e "targets::tar_progress()"

  clean:
    desc: Clean targets cache (use with caution!)
    interactive: true
    cmds:
      - |
        echo "⚠️  WARNING: This will delete all computed results in _targets/"
        echo "   This action cannot be undone."
        echo ""
        printf "   Are you sure you want to continue? [y/N] "
        read -r REPLY
        if [ "$REPLY" = "y" ] || [ "$REPLY" = "Y" ]; then
          echo "🗑️  Removing _targets/ directory..."
          rm -rf _targets/
          echo "✅ Targets cache cleaned successfully"
        else
          echo "❌ Clean operation cancelled"
        fi

  help:
    desc: Show available commands
    cmds:
      - task --list

  renv-init:
    desc: Initialize renv for dependency management
    cmds:
      - Rscript scripts/setup_renv.R

  install:
    desc: Install/restore R packages using renv
    deps: [renv-init]
    cmds:
      - Rscript scripts/install_packages.R

  renv-update:
    desc: Update renv lockfile with current package versions
    deps: [install]
    cmds:
      - echo "📸 Updating renv lockfile..."
      - Rscript -e "renv::snapshot(packages = c('lintr', 'covr'), prompt = FALSE)"
      - echo "✅ renv.lock updated"

  lint:
    desc: Run R code linting
    deps: [install]
    cmds:
      - Rscript -e "lintr::lint_dir('R', linters = lintr::linters_with_defaults(line_length_linter(120)))"
      - Rscript -e "lintr::lint_dir('scripts', linters = lintr::linters_with_defaults(line_length_linter(120)))"
      - Rscript -e "lintr::lint_dir('tests', linters = lintr::linters_with_defaults(line_length_linter(120)))"
      - Rscript -e "lintr::lint('_targets.Rmd', linters = lintr::linters_with_defaults(line_length_linter(120)))"

  profile:
    desc: Profile the targets pipeline to identify performance bottlenecks
    deps: [install]
    cmds:
      - Rscript scripts/profile_pipeline.R

  profile-view:
    desc: View previously saved profiling results
    deps: [install]
    cmds:
      - Rscript scripts/view_profile.R

  manuscript:
    desc: Render the manuscript to PDF and HTML
    deps: [manuscript-html, manuscript-pdf]
    cmds:
      - echo "✅ Manuscript rendered successfully"

  manuscript-pdf:
    desc: Render the manuscript to PDF only
    deps: [check-quarto, install]
    sources:
      - paper/**/*.qmd
      - data/**/*.csv
      - figures/**/*.pdf
      - figures/**/*.png
      - figures/**/*.svg
      - figures/**/*.jpg
      - figures/**/*.jpeg
      - figures/**/*.gif
      - figures/**/*.bmp
    cmds:
      - echo "📄 Rendering manuscript to PDF..."
      - cd paper && quarto render main.qmd --to pdf
      - echo "✅ PDF rendered at paper/main.pdf"

  manuscript-html:
    desc: Render the manuscript to HTML only
    deps: [check-quarto, install]
    sources:
      - paper/**/*.qmd
      - data/**/*.csv
      - figures/**/*.pdf
      - figures/**/*.png
      - figures/**/*.svg
      - figures/**/*.jpg
      - figures/**/*.jpeg
      - figures/**/*.gif
      - figures/**/*.bmp
    cmds:
      - echo "📄 Rendering manuscript to HTML..."
      - cd paper && quarto render main.qmd --to html
      - echo "✅ HTML rendered at paper/main.html"

  check-quarto:
    desc: Check if Quarto is installed
    cmds:
      - Rscript scripts/check_quarto.R

  test:
    desc: Run all tests using testthat
    deps: [install]
    cmds:
      - echo "🧪 Running tests..."
      - Rscript -e "devtools::test()"

  coverage:
    desc: Generate test coverage report
    deps: [install]
    cmds:
      - echo "📊 Generating coverage report..."
      - Rscript -e "covr::report()"

  coverage-console:
    desc: Show test coverage in console
    deps: [install]
    cmds:
      - echo "📊 Checking test coverage..."
      - Rscript -e "covr::package_coverage()"

  test-run:
    desc: Run the pipeline in test mode (fast, reduced scenarios)
    deps: [render]
    cmds:
      - echo "🚀 Running pipeline in test mode..."
      - task render PARAMS='test_mode=true'
      - task run
      - echo "✅ Test mode pipeline completed"