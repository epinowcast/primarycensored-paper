version: '3'

tasks:
  # Main workflow tasks
  default:
    desc: Run the complete analysis pipeline
    cmds:
      - task: run
      - task: manuscript

  render:
    desc: "Render the targets Rmarkdown document (optional: PARAMS='simulation_n=1000')"
    deps: [restore]
    sources:
      - _targets.Rmd
      - R/**/*.R
    generates:
      - _targets.md
    cmds:
      - |
        if [ -n "{{.PARAMS}}" ]; then
          Rscript scripts/render.R "{{.PARAMS}}"
        else
          Rscript scripts/render.R
        fi

  run:
    desc: Run the targets pipeline
    deps: [render]
    sources:
      - _targets.R
      - R/**/*.R
      - _targets_r/**/*.R
    cmds:
      - Rscript scripts/run.R

  visualize:
    desc: Create a visualization of the pipeline
    deps: [render]
    cmds:
      - Rscript scripts/visualize_pipeline.R

  progress:
    desc: Show pipeline progress
    deps: [restore]
    cmds:
      - echo "Checking pipeline progress..."
      - Rscript scripts/progress.R

  # Package management tasks
  renv-init:
    desc: Initialize renv for dependency management
    cmds:
      - Rscript scripts/setup_renv.R

  restore:
    desc: Restore R packages from renv lockfile
    deps: [renv-init]
    cmds:
      - Rscript scripts/restore_packages.R

  install:
    desc: "Install new R packages (usage: task install -- package1 package2)"
    deps: [renv-init]
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "Usage: task install -- <package1> [package2] ..."
          echo "Example: task install -- dplyr ggplot2"
          exit 1
        fi
        Rscript scripts/install_packages.R {{.CLI_ARGS}}

  renv-update:
    desc: Update renv lockfile with current package versions
    deps: [restore]
    cmds:
      - Rscript scripts/renv_update.R

  # Development and testing tasks
  lint:
    desc: Run R code linting
    deps: [restore]
    cmds:
      - Rscript scripts/lint.R

  test:
    desc: Run all tests using testthat
    deps: [restore]
    cmds:
      - Rscript scripts/test.R

  test-run:
    desc: Run the pipeline in test mode (fast, reduced scenarios)
    deps: [restore]
    cmds:
      - echo "üöÄ Running pipeline in test mode..."
      - Rscript scripts/render.R "test_mode=true"
      - Rscript scripts/run.R
      - echo "‚úÖ Test mode pipeline completed"

  coverage:
    desc: Generate test coverage report
    deps: [restore]
    cmds:
      - Rscript scripts/coverage.R

  coverage-console:
    desc: Show test coverage in console
    deps: [restore]
    cmds:
      - Rscript scripts/coverage_console.R

  profile:
    desc: Profile the targets pipeline to identify performance bottlenecks
    deps: [restore]
    cmds:
      - Rscript scripts/profile_pipeline.R

  profile-view:
    desc: View previously saved profiling results
    deps: [restore]
    cmds:
      - Rscript scripts/view_profile.R

  # Manuscript tasks
  manuscript:
    desc: Render the manuscript to PDF and HTML
    deps: [manuscript-html, manuscript-pdf]
    cmds:
      - echo "‚úÖ Manuscript rendered successfully"

  manuscript-pdf:
    desc: Render the manuscript to PDF only
    deps: [check-quarto, restore]
    sources:
      - paper/**/*.qmd
      - data/**/*.csv
      - figures/**/*.pdf
      - figures/**/*.png
      - figures/**/*.svg
      - figures/**/*.jpg
      - figures/**/*.jpeg
      - figures/**/*.gif
      - figures/**/*.bmp
    cmds:
      - echo "üìÑ Rendering manuscript to PDF..."
      - cd paper && quarto render main.qmd --to pdf
      - echo "‚úÖ PDF rendered at paper/main.pdf"

  manuscript-html:
    desc: Render the manuscript to HTML only
    deps: [check-quarto, restore]
    sources:
      - paper/**/*.qmd
      - data/**/*.csv
      - figures/**/*.pdf
      - figures/**/*.png
      - figures/**/*.svg
      - figures/**/*.jpg
      - figures/**/*.jpeg
      - figures/**/*.gif
      - figures/**/*.bmp
    cmds:
      - echo "üìÑ Rendering manuscript to HTML..."
      - cd paper && quarto render main.qmd --to html
      - echo "‚úÖ HTML rendered at paper/main.html"

  check-quarto:
    desc: Check if Quarto is installed
    cmds:
      - Rscript scripts/check_quarto.R

  # Utility tasks
  clean:
    desc: Clean targets cache (use with caution!)
    interactive: true
    cmds:
      - |
        echo "‚ö†Ô∏è  WARNING: This will delete all computed results in _targets/"
        echo "   This action cannot be undone."
        echo ""
        printf "   Are you sure you want to continue? [y/N] "
        read -r REPLY
        if [ "$REPLY" = "y" ] || [ "$REPLY" = "Y" ]; then
          echo "üóëÔ∏è  Removing _targets/ directory..."
          rm -rf _targets/
          echo "‚úÖ Targets cache cleaned successfully"
        else
          echo "‚ùå Clean operation cancelled"
        fi

  help:
    desc: Show available commands
    cmds:
      - task --list