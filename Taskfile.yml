version: '3'

tasks:
  default:
    desc: Run the complete analysis pipeline
    deps: [render]
    cmds:
      - task: run

  render:
    desc: Render the targets Rmarkdown document
    sources:
      - _targets.Rmd
      - R/**/*.R
    generates:
      - _targets.md
    cmds:
      - echo "Rendering _targets.Rmd..."
      - Rscript -e "rmarkdown::render('_targets.Rmd')"

  run:
    desc: Run the targets pipeline
    sources:
      - _targets.R
      - R/**/*.R
      - _targets_r/**/*.R
    cmds:
      - echo "Running targets pipeline..."
      - Rscript -e "targets::tar_make()"

  visualize:
    desc: Create a visualization of the pipeline
    deps: [render]
    cmds:
      - echo "üîç Creating pipeline visualization..."
      - |
        Rscript -e '
        if (!requireNamespace("visNetwork", quietly = TRUE)) {
          stop("The visNetwork package is required. Run: task install-deps")
        }
        
        # Create interactive visualization
        vis <- targets::tar_visnetwork()
        
        # Save as HTML
        htmlwidgets::saveWidget(
          vis, 
          "pipeline_visualization.html", 
          selfcontained = TRUE
        )
        
        message("‚úÖ Pipeline visualization opened in browser")
        message("   - HTML saved to: pipeline_visualization.html")
        message("   - To convert to image, use: task visualize-png")
        '

  visualize-png:
    desc: Convert pipeline visualization to PNG image
    deps: [visualize]
    cmds:
      - echo "üì∏ Converting pipeline visualization to PNG..."
      - |
        Rscript -e '
        if (!requireNamespace("webshot2", quietly = TRUE)) {
          stop("The webshot2 package is required. Run: task install-deps")
        }
        
        # Check if HTML exists
        if (!file.exists("pipeline_visualization.html")) {
          stop("No HTML visualization found. Run: task visualize")
        }
        
        # Convert HTML to PNG
        webshot2::webshot(
          "pipeline_visualization.html",
          "pipeline_visualization.png",
          vwidth = 1200,
          vheight = 800,
          zoom = 2
        )
        
        message("‚úÖ Pipeline visualization saved as PNG")
        message("   - Image saved to: pipeline_visualization.png")
        '

  progress:
    desc: Show pipeline progress
    cmds:
      - echo "Checking pipeline progress..."
      - Rscript -e "targets::tar_progress()"

  clean:
    desc: Clean targets cache (use with caution!)
    interactive: true
    cmds:
      - |
        echo "‚ö†Ô∏è  WARNING: This will delete all computed results in _targets/"
        echo "   This action cannot be undone."
        echo ""
        printf "   Are you sure you want to continue? [y/N] "
        read -r REPLY
        if [ "$REPLY" = "y" ] || [ "$REPLY" = "Y" ]; then
          echo "üóëÔ∏è  Removing _targets/ directory..."
          rm -rf _targets/
          echo "‚úÖ Targets cache cleaned successfully"
        else
          echo "‚ùå Clean operation cancelled"
        fi

  help:
    desc: Show available commands
    cmds:
      - task --list

  install:
    desc: Install required R packages
    cmds:
      - echo "üì¶ Installing R packages..."
      - Rscript -e "if (!requireNamespace('renv', quietly = TRUE)) install.packages('renv', repos = 'https://cloud.r-project.org')"
      - Rscript -e "if (file.exists('renv.lock')) renv::restore() else message('No renv.lock file found. Skipping restore.')"
      - echo "‚úÖ Package installation complete"

  install-deps:
    desc: Install all dependencies needed for the analysis
    cmds:
      - echo "üì¶ Installing project dependencies..."
      - |
        Rscript -e '
        repos <- "https://cloud.r-project.org"
        pkgs <- c("targets", "tarchetypes", "data.table", "ggplot2", "patchwork", 
                  "purrr", "here", "dplyr", "tidyr", "qs", "qs2", "crew", 
                  "primarycensored", "cmdstanr", "fitdistrplus", "profvis", 
                  "rmarkdown", "knitr", "visNetwork", "htmlwidgets", "webshot2")
        
        # Install missing packages
        missing <- pkgs[!pkgs %in% installed.packages()[,"Package"]]
        if (length(missing) > 0) {
          message("Installing: ", paste(missing, collapse = ", "))
          install.packages(missing, repos = repos)
        } else {
          message("All required packages are already installed")
        }
        
        # Special handling for cmdstanr (needs cmdstan)
        if ("cmdstanr" %in% pkgs && !cmdstanr::cmdstan_version()) {
          message("Installing CmdStan...")
          cmdstanr::install_cmdstan()
        }
        '
      - echo "‚úÖ All dependencies installed successfully"

  profile:
    desc: Profile the targets pipeline to identify performance bottlenecks
    cmds:
      - echo "üîç Profiling targets pipeline..."
      - |
        Rscript -e '
        if (!requireNamespace("profvis", quietly = TRUE)) {
          stop("The profvis package is required. Run: task install-deps")
        }
        
        message("Running pipeline with profiling enabled...")
        message("This may take longer than normal execution.")
        
        # Run profiling
        results <- profvis::profvis(
          targets::tar_make(
            callr_function = NULL,  # Run in current session
            use_crew = FALSE,       # Disable parallel for accurate profiling
            as_job = FALSE          # Run in foreground
          )
        )
        
        # Save results
        saveRDS(results, "profile_results.rds")
        
        # Save HTML report
        htmlwidgets::saveWidget(results, "profile_report.html", selfcontained = TRUE)
        
        message("\n‚úÖ Profiling complete!")
        message("   - Interactive viewer opened in browser")
        message("   - Results saved to: profile_results.rds")
        message("   - HTML report saved to: profile_report.html")
        '

  profile-view:
    desc: View previously saved profiling results
    cmds:
      - echo "üìä Loading profiling results..."
      - |
        Rscript -e '
        if (!file.exists("profile_results.rds")) {
          stop("No profiling results found. Run: task profile")
        }
        
        results <- readRDS("profile_results.rds")
        print(results, aggregate = TRUE)
        message("\n‚úÖ Profile viewer opened in browser")
        '